{"events":[],"handlers":[{"code":"if coroutine.status(MainCoroutine) == \"dead\" then\n  MainCoroutine = coroutine.create(runCoroutines)\nend\nif coroutine.status(MainCoroutine) == \"suspended\" then\n  assert(coroutine.resume(MainCoroutine))\nend","filter":{"args":[],"signature":"onUpdate()","slotKey":"-4"},"key":"2"},{"code":"if databank ~= nil then\n    databank.setStringValue(\"options\", json.encode(options))\nend","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"0"},{"code":"--[[\n\tLUA PARAMETERS\n]]\nuseDatabankValues = false --export: if checked and if values were saved in databank, parmaters will be loaded from the databank, if not, following ones will be used\n\nPrefixScreen1 = \"s1_\" --export: the prefix used to enable container monitoring and display on the 1st screen\nPrefixScreen2 = \"s2_\" --export: the prefix used to enable container monitoring and display on the 2nd screen\nPrefixScreen3 = \"s3_\" --export: the prefix used to enable container monitoring and display on the 3rd screen\nPrefixScreen4 = \"s4_\" --export: the prefix used to enable container monitoring and display on the 4th screen\nPrefixScreen5 = \"s5_\" --export: the prefix used to enable container monitoring and display on the 5th screen\nPrefixScreen6 = \"s6_\" --export: the prefix used to enable container monitoring and display on the 6th screen\nPrefixScreen7 = \"s7_\" --export: the prefix used to enable container monitoring and display on the 7th screen\nPrefixScreen8 = \"s8_\" --export: the prefix used to enable container monitoring and display on the 8th screen\nPrefixScreen9 = \"s9_\" --export: the prefix used to enable container monitoring and display on the 9th screen\n\nscreenTitle1 = \"-\" --export: the title display on the 1st screen, not displayed if empty or equal to \"-\"\nscreenTitle2 = \"-\" --export: the title display on the 2nd screen, not displayed if empty or equal to \"-\"\nscreenTitle3 = \"-\" --export: the title display on the 3rd screen, not displayed if empty or equal to \"-\"\nscreenTitle4 = \"-\" --export: the title display on the 4th screen, not displayed if empty or equal to \"-\"\nscreenTitle5 = \"-\" --export: the title display on the 5th screen, not displayed if empty or equal to \"-\"\nscreenTitle6 = \"-\" --export: the title display on the 6th screen, not displayed if empty or equal to \"-\"\nscreenTitle7 = \"-\" --export: the title display on the 7th screen, not displayed if empty or equal to \"-\"\nscreenTitle8 = \"-\" --export: the title display on the 8th screen, not displayed if empty or equal to \"-\"\nscreenTitle9 = \"-\" --export: the title display on the 9th screen, not displayed if empty or equal to \"-\"\n\ncontainerProficiencyLvl = 5 --export: Talent level for Container Proficiency\ncontainerOptimizationLvl = 5 --export: Talent level for Container Optimization\ngroupByItemName = true --export: if enabled, this will group all entries with the same item name\n\nQuantityRoundedDecimals = 2 --export: maximum of decimals displayed for the quantity value\nPercentRoundedDecimals = 2 --export: maximum of decimals displayed for the percent fill value\nfontSize = 15 --export: the size of the text for all the screen\nmaxAmountOfElementsLoadedByTick = 5000 --export: the maximum number of element loaded by tick of the coroutine on script startup\nmaxAmountOfElementsRefreshedByTick = 200 --export: the maximum number of element refreshed by tick of the coroutine when refreshing values\n\n--[[\n\tINIT\n]]\n\nsystem.print(\"-----------------------------------\")\nsystem.print(\"DU-Storage-Monitoring version 4.0.0\")\nsystem.print(\"-----------------------------------\")\n\noptions = {}\noptions.containerMonitoringPrefix_screen1 = PrefixScreen1\noptions.containerMonitoringPrefix_screen2 = PrefixScreen2\noptions.containerMonitoringPrefix_screen3 = PrefixScreen3\noptions.containerMonitoringPrefix_screen4 = PrefixScreen4\noptions.containerMonitoringPrefix_screen5 = PrefixScreen5\noptions.containerMonitoringPrefix_screen6 = PrefixScreen6\noptions.containerMonitoringPrefix_screen7 = PrefixScreen7\noptions.containerMonitoringPrefix_screen8 = PrefixScreen8\noptions.containerMonitoringPrefix_screen9 = PrefixScreen9\noptions.screenTitle1 = screenTitle1\noptions.screenTitle2 = screenTitle2\noptions.screenTitle3 = screenTitle3\noptions.screenTitle4 = screenTitle4\noptions.screenTitle5 = screenTitle5\noptions.screenTitle6 = screenTitle6\noptions.screenTitle7 = screenTitle7\noptions.screenTitle8 = screenTitle8\noptions.screenTitle9 = screenTitle9\noptions.container_proficiency_lvl = containerProficiencyLvl\noptions.container_optimization_lvl = containerOptimizationLvl\noptions.groupByItemName = groupByItemName\noptions.QuantityRoundedDecimals = QuantityRoundedDecimals\noptions.PercentRoundedDecimals = PercentRoundedDecimals\noptions.fontSize = fontSize\noptions.maxAmountOfElementsLoadedByTick = maxAmountOfElementsLoadedByTick\noptions.maxAmountOfElementsRefreshedByTick = maxAmountOfElementsRefreshedByTick\n\nlocal renderScript = [[\nlocal json = require('dkjson')\nlocal data = json.decode(getInput()) or {}\n\nlocal rx,ry = getResolution()\n\nlocal back=createLayer()\nlocal front=createLayer()\n\nfont_size = data[1][2]\n\nlocal mini=loadFont('Play',12)\nlocal small=loadFont('Play',14)\nlocal smallBold=loadFont('Play-Bold',18)\nlocal itemName=loadFont('Play-Bold',font_size)\nlocal medV=loadFont('Play-Bold', 25)\nlocal bigV=loadFont('Play-Bold', 30)\nlocal big=loadFont('Play',38)\n\nsetBackgroundColor( 15/255,24/255,29/255)\n\nsetDefaultStrokeColor( back,Shape_Line,0,0,0,0.5)\nsetDefaultShadow( back,Shape_Line,6,0,0,0,0.5)\n\nsetDefaultFillColor( front,Shape_BoxRounded,249/255,212/255,123/255,1)\nsetDefaultFillColor( front,Shape_Text,0,0,0,1)\nsetDefaultFillColor( front,Shape_Box,0.075,0.125,0.156,1)\nsetDefaultFillColor( front,Shape_Text,0.710,0.878,0.941,1)\n\nfunction format_number(a)local b=a;while true do b,k=string.gsub(b,\"^(-?%d+)(%d%d%d)\",'%1 %2')if k==0 then break end end;return b end\n\nfunction round(a,b)if b then return utils.round(a/b)*b end;return a>=0 and math.floor(a+0.5)or math.ceil(a-0.5)end\n\nfunction getRGBGradient(a,b,c,d,e,f,g,h,i,j)a=-1*math.cos(a*math.pi)/2+0.5;local k=0;local l=0;local m=0;if a>=.5 then a=(a-0.5)*2;k=e-a*(e-h)l=f-a*(f-i)m=g-a*(g-j)else a=a*2;k=b-a*(b-e)l=c-a*(c-f)m=d-a*(d-g)end;return k,l,m end\n\nfunction renderHeader(title, subtitle)\n    local h_factor = 12\n    local h = 35\n    if subtitle ~= nil and subtitle ~= \"\" and subtitle ~= \"-\" then \n        h = 50\n    end\n    addLine( back,0,h+12,rx,h+12)\n    addBox(front,0,12,rx,h)\n    if subtitle ~= nil and subtitle ~= \"\" and subtitle ~= \"-\" then\n        addText(front,big,subtitle,44,50)\n        addText(front,smallBold,title,rx-250,40)\n    else\n        addText(front,smallBold,title,44,35)\n    end\nend\n\nlocal storageBar = createLayer()\nsetDefaultFillColor(storageBar,Shape_Text,110/255,166/255,181/255,1)\nsetDefaultFillColor(storageBar,Shape_Box,0.075,0.125,0.156,1)\nsetDefaultFillColor(storageBar,Shape_Line,1,1,1,1)\n\nlocal storageDark = createLayer()\nsetDefaultFillColor(storageDark,Shape_Text,63/255,92/255,102/255,1)\nsetDefaultFillColor(storageDark,Shape_Box,13/255,24/255,28/255,1)\n\nlocal colorLayer = createLayer()\n\nfunction renderResistanceBar(title, quantity, max, percent, x, y, w, h, withTitle)\n    local r,g,b = getRGBGradient(10/100,177/255,42/255,42/255,249/255,212/255,123/255,34/255,177/255,76/255)\n    \n    local quantity_x_pos = font_size * 6.7\n    local percent_x_pos = font_size * 2\n    \n    addBox(storageBar,x,y,w,h)\n    \n    if withTitle then\n        addText(storageBar, small, \"ITEMS\", x, y-5)\n        setNextTextAlign(storageDark, AlignH_Center, AlignV_Bottom)\n        addText(storageDark, small, \"MAX VOLUME\", x+(w*0.5), y-3)\n        setNextTextAlign(storageBar, AlignH_Center, AlignV_Bottom)\n        addText(storageBar, small, \"QUANTITY\", x+(w*0.75), y-3)\n        addText(storageBar, small, \"STORAGE\", x+w-60, y-5)\n    end\n    \n    local pos_y = y+(h/2)-2\n    \n    setNextTextAlign(storageBar, AlignH_Left, AlignV_Middle)\n    addText(storageBar, itemName, title, x+10, pos_y)\n    \n    setNextFillColor(colorLayer, r, g, b, 1)\n    addBox(colorLayer,x,y+h-3,w*(percent)/100,3)\n    \n    setNextTextAlign(storageDark, AlignH_Center, AlignV_Middle)\n    addText(storageDark, itemName, format_number(max) .. ' L', x+(w*0.5), pos_y)\n    \n    setNextTextAlign(storageBar, AlignH_Center, AlignV_Middle)\n    addText(storageBar, itemName, format_number(quantity), x+(w*0.75), pos_y)\n    \n    setNextFillColor(colorLayer, r, g, b, 1)\n    setNextTextAlign(colorLayer, AlignH_Right, AlignV_Middle)\n    addText(colorLayer, itemName, format_number(percent) ..\"%\", x+w-10, pos_y)\nend\n\nlocal screen_title = data[1][1]\nrenderHeader('STORAGE MONITORING', screen_title)\n\nstart_h = 75\nif screen_title ~= nil and screen_title ~= \"\" then\n    start_h = 100\nend\n\n\nlocal h = font_size + font_size / 2\nfor i,container in ipairs(data[2]) do\n    renderResistanceBar(container[1], container[2], container[3], container[4], 44, start_h, rx-88, h, i==1)\n    start_h = start_h+h+5\nend\nrequestAnimationFrame(10)\n]]\n\n--[[\n\tsplit a string on a delimiter By jericho\n]]\nfunction strSplit(a,b)result={}for c in(a..b):gmatch(\"(.-)\"..b)do table.insert(result,c)end;return result end\n\n--[[\n\tformatting numbers by adding a space between thousands by Jericho\n]]\nfunction format_number(a)local b=a;while true do b,k=string.gsub(b,\"^(-?%d+)(%d%d%d)\",'%1 %2')if k==0 then break end end;return b end\n\ncore = nil\ndatabank = nil\nscreens = {}\nfor slot_name, slot in pairs(unit) do\n    if\n    type(slot) == \"table\"\n            and type(slot.export) == \"table\"\n            and slot.getClass\n    then\n        if slot.getClass():lower():find(\"coreunit\") then\n            core = slot\n        end\n        if slot.getClass():lower() == 'screenunit' then\n            slot.slotname = slot_name\n            table.insert(screens,slot)\n            slot.setRenderScript(renderScript)\n        end\n        if slot.getClass():lower() == 'databankunit' then\n            databank = slot\n        end\n    end\nend\nif #screens == 0 then\n    system.print(\"No Screen Detected\")\nelse\n    --sorting screens by slotname to be sure the display is not changing\n    table.sort(screens, function(a,b) return a.slotname < b.slotname end)\n    local plural = \"\"\n    if #screens > 1 then plural = \"s\" end\n    system.print(#screens .. \" screen\" .. plural .. \" Connected\")\nend\nif core == nil then\n    system.print(\"No Core Detected\")\nelse\n    system.print(\"Core Connected\")\nend\nif databank == nil then\n    system.print(\"No Databank Detected\")\nelse\n    system.print(\"Databank Connected\")\n    if (databank.hasKey(\"options\")) and (useDatabankValues == true) then\n        local db_options = json.decode(databank.getStringValue(\"options\"))\n        for key, value in pairs(options) do\n            if db_options[key] then options[key] = db_options[key] end\n        end\n        system.print(\"Options Loaded From Databank\")\n    else\n        system.print(\"Options Loaded From LUA Parameters\")\n    end\nend\nprefixes = {\n    options.containerMonitoringPrefix_screen1,\n    options.containerMonitoringPrefix_screen2,\n    options.containerMonitoringPrefix_screen3,\n    options.containerMonitoringPrefix_screen4,\n    options.containerMonitoringPrefix_screen5,\n    options.containerMonitoringPrefix_screen6,\n    options.containerMonitoringPrefix_screen7,\n    options.containerMonitoringPrefix_screen8,\n    options.containerMonitoringPrefix_screen9\n}\ntitles = {\n    options.screenTitle1,\n    options.screenTitle2,\n    options.screenTitle3,\n    options.screenTitle4,\n    options.screenTitle5,\n    options.screenTitle6,\n    options.screenTitle7,\n    options.screenTitle8,\n    options.screenTitle9\n}\nelementsIdList = {}\nif core ~= nil then\n    elementsIdList = core.getElementIdList()\nend\nstorageIdList= {}\ninitIndex = 0\ninitFinished = false\n\n-- clean the name from specific char, etc.\nfunction cleanName(name)\n    if name ~= nil and name:len() > 0 then\n        name = string.gsub(name:lower(), \"-\", \"\")\n    else\n        name = \"unknown\"\n    end\n    return name:gsub(\"%s+\", \"\")\nend\n\n--Nested Coroutines by Jericho\ncoroutinesTable  = {}\n--all functions here will become a coroutine\nMyCoroutines = {\n    function()\n        if not initFinished then\n            system.print(\"Loading contructs elements (\" .. #elementsIdList .. \" elements detected)\")\n            for i = 1, #elementsIdList, 1 do\n                initIndex = i\n                local id = elementsIdList[i]\n                local elementType = core.getElementDisplayNameById(id):lower()\n                if elementType:lower():find(\"container\") then\n                    table.insert(storageIdList, id)\n                end\n                if (i%options.maxAmountOfElementsLoadedByTick) == 0 then\n                    system.print(i .. ' elements scanned on ' .. #elementsIdList .. ' with ' .. #storageIdList .. \" identified\")\n                    coroutine.yield(coroutinesTable[1])\n                end\n            end\n            if initIndex == #elementsIdList then\n                system.print(#elementsIdList .. \" scanned with \" .. #storageIdList .. \" storage elements identified\")\n                initFinished = true\n            end\n        end\n    end,\n    function()\n        local storage_elements = {}\n        for elemindex,id in ipairs(storageIdList) do\n            local elementType = core.getElementDisplayNameById(id)\n            if elementType:lower():find(\"container\") then\n                local elementName = core.getElementNameById(id)\n                if\n                    elementName:lower():find(prefixes[1]:lower())\n                    or elementName:lower():find(prefixes[2]:lower())\n                    or elementName:lower():find(prefixes[3]:lower())\n                    or elementName:lower():find(prefixes[4]:lower())\n                    or elementName:lower():find(prefixes[5]:lower())\n                    or elementName:lower():find(prefixes[6]:lower())\n                    or elementName:lower():find(prefixes[7]:lower())\n                    or elementName:lower():find(prefixes[8]:lower())\n                    or elementName:lower():find(prefixes[9]:lower())\n                    then\n                    local container = {}\n                    local splitted = strSplit(elementName, '_')\n                    local name = splitted[2]\n                    local ingredient = system.getItem(name)\n                    local container_size = \"XS\"\n                    local container_amount = 1\n                    local container_empty_mass = 0\n                    local container_volume = 0\n                    local contentQuantity = 0\n                    local percent_fill = 0\n                    if not elementType:lower():find(\"hub\") then\n                        local containerMaxHP = core.getElementMaxHitPointsById(id)\n                        if containerMaxHP > 68000 then\n                            container_size = \"XXL\"\n                            container_empty_mass = 88410\n                            container_volume = 512000 * (options.container_proficiency_lvl * 0.1) + 512000\n                        elseif containerMaxHP > 33000 then\n                            container_size = \"XL\"\n                            container_empty_mass = 44210\n                            container_volume = 256000 * (options.container_proficiency_lvl * 0.1) + 256000\n                        elseif containerMaxHP > 17000 then\n                            container_size = \"L\"\n                            container_empty_mass = 14842.7\n                            container_volume = 128000 * (options.container_proficiency_lvl * 0.1) + 128000\n                        elseif containerMaxHP > 7900 then\n                            container_size = \"M\"\n                            container_empty_mass = 7421.35\n                            container_volume = 64000 * (options.container_proficiency_lvl * 0.1) + 64000\n                        elseif containerMaxHP > 900 then\n                            container_size = \"S\"\n                            container_empty_mass = 1281.31\n                            container_volume = 8000 * (options.container_proficiency_lvl * 0.1) + 8000\n                        else\n                            container_size = \"XS\"\n                            container_empty_mass = 229.09\n                            container_volume = 1000 * (options.container_proficiency_lvl * 0.1) + 1000\n                        end\n                    else\n                        if splitted[3] then\n                            container_size = splitted[3]\n                        end\n                        if splitted[4] then \n                            container_amount = splitted[4]\n                        end\n                        local volume = 0\n                        container_volume_list = {xxl=512000, xl=256000, l=128000, m=64000, s=8000, xs=1000}\n                        container_size = container_size:lower()\n                        if container_volume_list[container_size] then\n                            volume = container_volume_list[container_size]\n                        end\n                        container_volume = (volume * options.container_proficiency_lvl * 0.1 + volume) * tonumber(container_amount)\n                        container_empty_mass = getIngredient(\"Container Hub\").mass\n                    end\n                    local totalMass = core.getElementMassById(id)\n                    local contentMassKg = totalMass - container_empty_mass\n                    container.id = id\n                    container.itemid = ingredient.id\n                    container.realName = elementName\n                    container.prefix = splitted[1] .. \"_\"\n                    container.name = name\n                    container.ingredient = ingredient\n                    container.quantity = contentMassKg / (ingredient.unitMass - (ingredient.unitMass * (options.container_optimization_lvl * 0.05)))\n                    container.volume = container_volume\n                    container.percent = utils.round((ingredient.unitVolume * container.quantity) * 100 / container_volume)\n                    if ingredient.name == \"InvalidItem\" then\n                        container.percent = 0\n                        container.quantity = 0\n                    end\n                    table.insert(storage_elements, container)\n                end\n            end\n            if (elemindex%options.maxAmountOfElementsRefreshedByTick) == 0 then\n                coroutine.yield(coroutinesTable[2])\n            end\n        end\n\n        -- group by name and screen\n        local groupped = {}\n        if groupByItemName then\n            for _,v in pairs(storage_elements) do\n                local prefix = v.prefix:lower()\n                if groupped[prefix .. cleanName(v.ingredient.name)] then\n                    groupped[prefix .. cleanName(v.ingredient.name)].quantity = groupped[prefix .. cleanName(v.ingredient.name)].quantity + v.quantity\n                    groupped[prefix .. cleanName(v.ingredient.name)].volume = groupped[prefix .. cleanName(v.ingredient.name)].volume + v.volume\n                    groupped[prefix .. cleanName(v.ingredient.name)].percent = (v.ingredient.unitVolume * groupped[prefix .. cleanName(v.ingredient.name)].quantity) * 100 / groupped[prefix .. cleanName(v.ingredient.name)].volume\n                else\n                    groupped[prefix .. cleanName(v.ingredient.name)] = v\n                end\n            end\n        else\n            groupped = storage_elements\n        end\n\n        -- sorting by tier\n        local tiers = {}\n        tiers[1] = {} --tier 0 (thx to Belorion#3127 for pointing Oxygen and Hydrogen are Tier 0 and not 1)\n        tiers[2] = {} --tier 1\n        tiers[3] = {} --tier 2\n        tiers[4] = {} --tier 3\n        tiers[5] = {} --tier 4\n        tiers[6] = {} --tier 5\n        for _,v in pairs(groupped) do\n            table.insert(tiers[v.ingredient.tier+1],v)\n        end\n\n        -- sorting by name\n        for k,v in pairs(tiers) do\n            table.sort(tiers[k], function(a,b) return a.ingredient.name:lower() < b.ingredient.name:lower() end)\n        end\n\n        if #screens > 0 then\n            for index, screen in pairs(screens) do\n                screen_data = {}\n                local prefix = prefixes[index]\n                local title = titles[index]\n                \n                for tier_k,tier in pairs(tiers) do\n                    for _,container in pairs(tier) do\n                        if container.prefix:lower():find(prefix:lower()) then\n                            local item_name = container.ingredient.locDisplayNameWithSize\n                            if container.ingredient.name == 'InvalidItem' then\n                                item_name = 'Invalid Item Id'\n                            end\n                            local storage_data = {\n                                item_name,\n                                utils.round(container.quantity * (10 ^ options.QuantityRoundedDecimals)) / (10 ^ options.QuantityRoundedDecimals),\n                                utils.round(container.volume),\n                                utils.round(container.percent * (10 ^ options.PercentRoundedDecimals)) / (10 ^ options.PercentRoundedDecimals)\n                            }\n                            table.insert(screen_data, storage_data)\n                        end\n                    end\n                end\n                local data_to_send = {\n                    {\n                        titles[index],\n                        options.fontSize\n                    },\n                    screen_data\n                }\n                screen.setScriptInput(json.encode(data_to_send))\n            end\n        end\n    end\n}\n\nfunction initCoroutines()\n    for _,f in pairs(MyCoroutines) do\n        local co = coroutine.create(f)\n        table.insert(coroutinesTable, co)\n    end\nend\n\ninitCoroutines()\n\nrunCoroutines = function()\n    for i,co in ipairs(coroutinesTable) do\n        if coroutine.status(co) == \"dead\" then\n            coroutinesTable[i] = coroutine.create(MyCoroutines[i])\n        end\n        if coroutine.status(co) == \"suspended\" then\n            assert(coroutine.resume(co))\n        end\n    end\nend\n\nMainCoroutine = coroutine.create(runCoroutines)","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"1"}],"methods":[],"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}}}}
